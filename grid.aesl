<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="400" name="THRESHOLD"/>
<constant value="80" name="CHANGE"/>
<constant value="100" name="DIFF"/>
<constant value="200" name="SPEED"/>
<constant value="1500" name="TIMER"/>
<constant value="1" name="RIGHT"/>
<constant value="-1" name="LEFT"/>
<constant value="0" name="STRAIGHT"/>
<constant value="3500" name="HORIZONTAL_THRESHOLD"/>
<constant value="0" name="STATE_OFF"/>
<constant value="1" name="STATE_SEARCHING"/>
<constant value="2" name="STATE_FOLLOWING"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node e-puck 2-->
<node nodeId="0" name="e-puck 2"></node>


<!--node e-puck 1-->
<node nodeId="0" name="e-puck 1"># Thymio-II program: follow a line
# Copyright 2013 by Moti Ben-Ari
# CreativeCommons BY-SA 2.0

# Constants
#  THRESHOLD for sensing the tape
#  DIFF      difference to remember last deviation
#  CHANGE    percentage change of motors for steering
#  TIMER     timer for computing direction

# Variables
var motor          # The base value of the motor power
var motor_change   # The amount to change when approaching and turning

var state # 0 = off, 1 = on

var diff  # The difference between the two ground sensors
var dir   # The last direction: 1 = right, -1 = left

# Initialization
motor = 0
motor_change = (motor * CHANGE)/100
state = 0
dir = 0
timer.period[0] = TIMER
call leds.circle(0,0,0,0,0,0,0,0)
call leds.buttons(0,0,0,0)

# Set the circle leds to indicate the motor power
sub set_circle_leds
  if motor/100==0 then call leds.circle(0,0,0,0,0,0,0,0) end
  if motor/100==1 then call leds.circle(32,0,0,0,0,0,0,0) end
  if motor/100==2 then call leds.circle(32,32,0,0,0,0,0,0) end
  if motor/100==3 then call leds.circle(32,32,32,0,0,0,0,0) end
  if motor/100==4 then call leds.circle(32,32,32,32,0,0,0,0) end
  if motor/100==5 then call leds.circle(32,32,32,32,32,0,0,0) end

# Left and right button event handlers
#   Increase or decrease motor power within 0-500
onevent button.left
  if  button.left == 0 then
    motor = motor - INCREMENT
    if  motor &lt; 0 then motor = 0 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

onevent button.right
  if  button.right == 0 then
    motor = motor + INCREMENT
    if  motor > 500 then motor = 500 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

# When center button released
onevent button.center
  if  button.center == 0 then
    # If off, set state to 1 (on) and dirve forwards
    if  state == 0 then
      state = 1
      motor.left.target  = motor
      motor.right.target = motor
    #   else if state is on, call stop the motors
    else
      state = 0
      motor.left.target  = 0
      motor.right.target = 0
    end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

# Timer event occurs
onevent timer0
  # Compute difference between the values of the ground sensors
  diff = prox.ground.delta[0] - prox.ground.delta[1]
  # If absolute value of the difference is above the threshold
  if  abs diff >= DIFF then
    # Compute direction according to the sign of the difference
  	if  diff > 0 then
  	  dir = 1
      call leds.top(0, 32, 0)
    else
      dir = -1
  	  call leds.top(0, 0, 32)
  	end
  else
    call leds.top(0, 0, 0)
  end

# Drive straight
sub drive
  # If both sensors no longer detect the tape
  if  prox.ground.delta[0] > THRESHOLD and
      prox.ground.delta[1] > THRESHOLD then
    # Turn left or right depending on the value in dir
    if  dir == 1 then
      motor.left.target  = motor + motor_change
  	  motor.right.target = motor - motor_change
      call leds.buttons(0,32,0,0)
    else    	
  	  motor.left.target  = motor - motor_change
  	  motor.right.target = motor + motor_change
      call leds.buttons(0,0,0,32)
    end
  # If one of the ground sensors finds the tape
  #   turn the robot in the appropriate direction
  elseif  prox.ground.delta[0] > THRESHOLD then
  	 motor.left.target  = motor + motor_change
  	 motor.right.target = motor - motor_change
     call leds.buttons(0,32,0,0)
  elseif  prox.ground.delta[1] > THRESHOLD then
  	 motor.left.target  = motor - motor_change
  	 motor.right.target = motor + motor_change
     call leds.buttons(0,0,0,32)
  # Otherwise, drive straight
  else
  	 motor.left.target  = motor
  	 motor.right.target = motor
     call leds.buttons(32,0,0,0)
  end

# Proximity event occurs, call subroutine drive
onevent prox
  if  state == 1 then
	callsub drive
  end
</node>


<!--node e-puck 3-->
<node nodeId="0" name="e-puck 3"></node>


<!--node e-puck 4-->
<node nodeId="0" name="e-puck 4"></node>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># Thymio-II program: follow a line
# Copyright 2013 by Moti Ben-Ari
# CreativeCommons BY-SA 2.0

# Constants
#  THRESHOLD for sensing the tape
#  DIFF      difference to remember last deviation
#  CHANGE    percentage change of motors for steering
#  TIMER     timer for computing direction

# Variables
var motor          # The base value of the motor power
var motor_change   # The amount to change when approaching and turning

var state # 0 = off, 1 = on

var diff  # The difference between the two ground sensors
var dir   # The last direction: 1 = right, -1 = left

var timer_expired = 0
#var rock_found

# Initialization
motor = SPEED
motor_change = (SPEED * CHANGE)/100
state = STATE_OFF
dir = STRAIGHT
#rock_found = 0

#speed indicator
call leds.circle(32,0,0,0,0,0,0,0)
call leds.buttons(0,0,0,0)

sub reset	
	timer.period[0] = -1
#    rock_found = 0
    dir = STRAIGHT
    # If off, set state to 1 (on) and dirve forwards
    if  state == STATE_OFF then
      state = STATE_SEARCHING
      motor.left.target  = motor
      motor.right.target = motor
    #   else if state is on, call stop the motors
    else
      state = STATE_OFF
      motor.left.target  = 0
      motor.right.target = 0
    end
    motor_change = (motor * CHANGE)/100

# When center button released
onevent button.center
	if  button.center == 0 then
  		callsub reset
  	end
  
sub drive_straight
  motor.left.target  = motor
  motor.right.target = motor
  call leds.buttons(32,0,0,0)
  
sub turn_left
  motor.left.target  = motor - motor_change
  motor.right.target = motor + motor_change
  call leds.buttons(0,0,0,32)
    
sub turn_right
  motor.left.target  = motor + motor_change
  motor.right.target = motor - motor_change
  call leds.buttons(0,32,0,0)
  
sub stop
  motor.left.target  = 0
  motor.right.target = 0
  call leds.buttons(0,0,0,0)

# Drive straight
sub drive
  if  prox.ground.delta[0] > THRESHOLD and
      prox.ground.delta[1] > THRESHOLD then
	    # Turn left or right depending on the value in dir
	    if  dir == RIGHT then
	      callsub turn_right
	    elseif dir == LEFT then    	
	  	  callsub turn_left
	  	#no tape and dir == STRAIGHT
	  	else
	  	  	#we've already seen the line, stay on it
	  	  if state == STATE_FOLLOWING then
	  	  	dir = LEFT
	  	  	callsub turn_left
	  	  #we've never seen the line before	
	  	  else
	  	  	callsub drive_straight
	  	  end
	    end
	    if state == STATE_FOLLOWING then	  	
	  	  if timer_expired == 1 then
	  		callsub stop
	  		callsub reset
	  	  else
	  		if timer.period[0] &lt; 0 then
	  			timer.period[0] = TIMER
	  		end	  		
	  	  end
	    end	  
    
  # If one of the ground sensors finds the tape
  #   turn the robot in the appropriate direction
  else
  	timer_expired = 0
  	timer.period[0] = -1
  	state = STATE_FOLLOWING
	  if  prox.ground.delta[0] > THRESHOLD then
	  	 callsub turn_right
	  	 dir = RIGHT
	  elseif  prox.ground.delta[1] > THRESHOLD then
	  	 callsub turn_left
	  	 dir = LEFT
	  # Otherwise, drive straight
	  else	     
	  	 callsub drive_straight
	  	 dir = 0
	  end
  end
  
onevent timer0
	timer_expired = 1
	timer.period[0] = -1

# Proximity event occurs, call subroutine drive
onevent prox
  if  state == STATE_SEARCHING or
  	  state == STATE_FOLLOWING then
	callsub drive
  end
</node>


</network>
