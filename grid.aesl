<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="5" name="DO_CALIBRATE"/>
<event size="10" name="STATE_PRE_CALIBRATE"/>


<!--list of constants-->
<constant value="400" name="THRESHOLD"/>
<constant value="80" name="CHANGE"/>
<constant value="100" name="DIFF"/>
<constant value="200" name="SPEED"/>
<constant value="100" name="TIMER"/>
<constant value="1" name="RIGHT"/>
<constant value="-1" name="LEFT"/>
<constant value="0" name="STRAIGHT"/>
<constant value="3500" name="HORIZONTAL_THRESHOLD"/>
<constant value="0" name="STATE_OFF"/>
<constant value="1" name="STATE_SEARCHING"/>
<constant value="2" name="STATE_FOLLOWING"/>
<constant value="2255" name="TURN_TIMER"/>
<constant value="3" name="STATE_CALIBRATE"/>
<constant value="50" name="CALIBRATION_SPEED"/>
<constant value="1" name="BLACK"/>
<constant value="2" name="GREEN"/>
<constant value="3" name="STOP"/>
<constant value="700" name="THRESHOLD_NOTHING"/>
<constant value="400" name="THRESHOLD_BLACK"/>
<constant value="2500" name="THRESHOLD_DEADLINE"/>
<constant value="0" name="SD_LEFT"/>
<constant value="1" name="SD_RIGHT"/>
<constant value="10" name="STATE_PRE_CALIBRATE"/>
<constant value="25" name="PRE_CALIBRATE_THREESHOLD"/>
<constant value="425" name="STRAIGHT_SPEED"/>
<constant value="1150" name="STRAIGHT_TIMER"/>
<constant value="20" name="STATE_GO"/>
<constant value="0" name="SD_UP"/>
<constant value="40" name="SD_UP_SECOND"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node e-puck 2-->
<node nodeId="0" name="e-puck 2"></node>


<!--node e-puck 1-->
<node nodeId="0" name="e-puck 1"># Thymio-II program: follow a line
# Copyright 2013 by Moti Ben-Ari
# CreativeCommons BY-SA 2.0

# Constants
#  THRESHOLD for sensing the tape
#  DIFF      difference to remember last deviation
#  CHANGE    percentage change of motors for steering
#  TIMER     timer for computing direction

# Variables
var motor          # The base value of the motor power
var motor_change   # The amount to change when approaching and turning

var state # 0 = off, 1 = on

var diff  # The difference between the two ground sensors
var dir   # The last direction: 1 = right, -1 = left

# Initialization
motor = 0
motor_change = (motor * CHANGE)/100
state = 0
dir = 0
timer.period[0] = TIMER
call leds.circle(0,0,0,0,0,0,0,0)
call leds.buttons(0,0,0,0)

# Set the circle leds to indicate the motor power
sub set_circle_leds
  if motor/100==0 then call leds.circle(0,0,0,0,0,0,0,0) end
  if motor/100==1 then call leds.circle(32,0,0,0,0,0,0,0) end
  if motor/100==2 then call leds.circle(32,32,0,0,0,0,0,0) end
  if motor/100==3 then call leds.circle(32,32,32,0,0,0,0,0) end
  if motor/100==4 then call leds.circle(32,32,32,32,0,0,0,0) end
  if motor/100==5 then call leds.circle(32,32,32,32,32,0,0,0) end

# Left and right button event handlers
#   Increase or decrease motor power within 0-500
onevent button.left
  if  button.left == 0 then
    motor = motor - INCREMENT
    if  motor &lt; 0 then motor = 0 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

onevent button.right
  if  button.right == 0 then
    motor = motor + INCREMENT
    if  motor > 500 then motor = 500 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

# When center button released
onevent button.center
  if  button.center == 0 then
    # If off, set state to 1 (on) and dirve forwards
    if  state == 0 then
      state = 1
      motor.left.target  = motor
      motor.right.target = motor
    #   else if state is on, call stop the motors
    else
      state = 0
      motor.left.target  = 0
      motor.right.target = 0
    end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

# Timer event occurs
onevent timer0
  # Compute difference between the values of the ground sensors
  diff = prox.ground.delta[0] - prox.ground.delta[1]
  # If absolute value of the difference is above the threshold
  if  abs diff >= DIFF then
    # Compute direction according to the sign of the difference
  	if  diff > 0 then
  	  dir = 1
      call leds.top(0, 32, 0)
    else
      dir = -1
  	  call leds.top(0, 0, 32)
  	end
  else
    call leds.top(0, 0, 0)
  end

# Drive straight
sub drive
  # If both sensors no longer detect the tape
  if  prox.ground.delta[0] > THRESHOLD and
      prox.ground.delta[1] > THRESHOLD then
    # Turn left or right depending on the value in dir
    if  dir == 1 then
      motor.left.target  = motor + motor_change
  	  motor.right.target = motor - motor_change
      call leds.buttons(0,32,0,0)
    else    	
  	  motor.left.target  = motor - motor_change
  	  motor.right.target = motor + motor_change
      call leds.buttons(0,0,0,32)
    end
  # If one of the ground sensors finds the tape
  #   turn the robot in the appropriate direction
  elseif  prox.ground.delta[0] > THRESHOLD then
  	 motor.left.target  = motor + motor_change
  	 motor.right.target = motor - motor_change
     call leds.buttons(0,32,0,0)
  elseif  prox.ground.delta[1] > THRESHOLD then
  	 motor.left.target  = motor - motor_change
  	 motor.right.target = motor + motor_change
     call leds.buttons(0,0,0,32)
  # Otherwise, drive straight
  else
  	 motor.left.target  = motor
  	 motor.right.target = motor
     call leds.buttons(32,0,0,0)
  end

# Proximity event occurs, call subroutine drive
onevent prox
  if  state == 1 then
	callsub drive
  end
</node>


<!--node e-puck 3-->
<node nodeId="0" name="e-puck 3"></node>


<!--node e-puck 4-->
<node nodeId="0" name="e-puck 4"></node>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># Thymio-II program: follow a line
# Copyright 2013 by Moti Ben-Ari
# CreativeCommons BY-SA 2.0

# Constants
#  THRESHOLD for sensing the tape
#  DIFF      difference to remember last deviation
#  CHANGE    percentage change of motors for steering
#  TIMER     timer for computing direction

# Variables
var motor          # The base value of the motor power
var motor_change   # The amount to change when approaching and turning

var state # 0 = off, 1 = on

var diff  # The difference between the two ground sensors
var dir   # The last direction: 1 = right, -1 = left
var right = 0
var left = 0
var position[2]
var direction[2]
var current_target[2]
var target1[2] = [2,2]
var target2[2] = [6,3]
var target3[2] = [5,4]
var target4[2] = [5,5]
var target_index = 0
var sound_state = 0
var target_direction[2]

# Initialization
motor = SPEED
motor_change = (SPEED * CHANGE)/100
state = STATE_OFF
dir = STRAIGHT
#rock_found = 0

#speed indicator
call leds.circle(0,0,0,0,0,0,0,0)
call leds.buttons(0,0,0,0)
call leds.prox.v(0, 0)

sub reset
	
	timer.period[0] = -1
    call leds.circle(0,0,0,0,0,0,0,0)
    dir = STRAIGHT
    right = 0
    left = 0
    # If off, set state to 1 (on) and dirve forwards
    if  state == STATE_OFF then
      state = STATE_SEARCHING
      motor.left.target  = motor
      motor.right.target = motor
    #   else if state is on, call stop the motors
    else
      state = STATE_OFF
      motor.left.target  = 0
      motor.right.target = 0
    end
    motor_change = (motor * CHANGE)/100

# When center button released
onevent button.center
	if  button.center == 0 then
  		callsub reset
  	end
  
sub drive_straight
  motor.left.target  = motor
  motor.right.target = motor
  call leds.buttons(32,0,0,0)
  
sub straight_one_cell
  position[0] = position[0] + direction[0]
  position[1] = position[1] + direction[1]
  motor.left.target  = STRAIGHT_SPEED
  motor.right.target = STRAIGHT_SPEED
  call leds.top(31,0,0) 
  timer.period[0] = STRAIGHT_TIMER
  
sub back_one_cell
  position[0] = position[0] - direction[0]
  position[1] = position[1] - direction[1]
  motor.left.target  = - STRAIGHT_SPEED
  motor.right.target = - STRAIGHT_SPEED
  call leds.top(31,0,0) 
  timer.period[0] = STRAIGHT_TIMER
  
sub turn_left
  if state == STATE_FOLLOWING then
  	if left &lt; 32767 then
  		left = left + 1
  	end
  end
  motor.left.target  = motor - motor_change
  motor.right.target = motor + motor_change
  call leds.buttons(0,0,0,32)
    
sub turn_right
  if state == STATE_FOLLOWING then
  	if right &lt; 32767 then
  		right = right + 1
  	end
  end
  motor.left.target  = motor + motor_change
  motor.right.target = motor - motor_change
  call leds.buttons(0,32,0,0)
  
sub stop
  motor.left.target  = 0
  motor.right.target = 0
  call leds.buttons(0,0,0,0)
  
sub turn_left_90
	if direction[0] == 0 and direction[1] == 1 then
		direction[0] = -1
		direction[1] = 0
	elseif direction[0] == -1 and direction[1] == 0 then
		direction[0] = 0
		direction[1] = -1
	elseif direction[0] == 0 and direction[1] == -1 then
		direction[0] = 1
		direction[1] = 0
	elseif direction[0] == 1 and direction[1] == 0 then
		direction[0] = 0
		direction[1] = 1
	end
	motor.left.target = -100
	motor.right.target = 100
	timer.period[0] = TURN_TIMER
	
sub turn_right_90
	if direction[0] == 0 and direction[1] == 1 then
		direction[0] = 1
		direction[1] = 0
	elseif direction[0] == 1 and direction[1] == 0 then
		direction[0] = 0
		direction[1] = -1
	elseif direction[0] == 0 and direction[1] == -1 then
		direction[0] = -1
		direction[1] = 0
	elseif direction[0] == -1 and direction[1] == 0 then
		direction[0] = 0
		direction[1] = 1
	end
	motor.right.target = -100
	motor.left.target = 100
	
	timer.period[0] = TURN_TIMER
	
# call this when we follow black line
sub useBlack
	if  prox.ground.delta[0] > THRESHOLD_NOTHING then
	  	 callsub turn_right
	  elseif  prox.ground.delta[1] > THRESHOLD_NOTHING then
	  	 callsub turn_left
	  # Otherwise, drive straight
	  else	     
	  	 callsub drive_straight
	  end
  
#this function check that we reach black line
sub checkBlack
	if  prox.ground.delta[0] &lt; THRESHOLD_BLACK or
      prox.ground.delta[1] &lt; THRESHOLD_BLACK then
		state = STATE_FOLLOWING
		timer.period[0] = TIMER
		callsub useBlack
	end
	
sub next_target
	if target_index == 0 then
		current_target = target1
	elseif target_index == 1 then
		current_target = target2
	elseif target_index == 2 then
		current_target = target3
	elseif target_index == 3 then	
		current_target = target4
	end
	target_index = target_index + 1
	
sub move_to_target
	
		if  current_target[0] == position[0] and
		    current_target[1] == position[1] then
		    if target_index > 0 then
		    	sound_state = 0
    			call sound.freq(392,20)
				if target_index == 4 then
					callsub stop
					callsub reset
				end
			end
			callsub next_target
		end
	
	if state != STATE_OFF then
		target_direction[0] = current_target[0] - position[0]
		target_direction[1] = current_target[1] - position[1]
		
		if target_direction[0] > 0 and direction[0] > 0 then
			callsub straight_one_cell
		elseif  target_direction[1] > 0 and direction[1] > 0 then
			callsub straight_one_cell
		elseif target_direction[0] &lt; 0 and direction[0] &lt; 0 then
			callsub straight_one_cell
		elseif  target_direction[1] &lt; 0 and direction[1] &lt; 0 then
			callsub straight_one_cell
		else
			callsub turn_right_90
		end
	end
	
sub checkDeadline
	if  prox.horizontal[3] > THRESHOLD_DEADLINE then
		callsub stop
		state = STATE_PRE_CALIBRATE
		if left &lt; right then
			position[0] = 1
			position[1] = 0
			direction[0] = -1
			direction[1] = 0
		else
			position[0] = 0
			position[1] = 1
			direction[0] = 0
			direction[1] = -1
		end
		current_target[0] = 1
		current_target[1] = 1
		
		state = STATE_GO
		callsub move_to_target
	end

#main driver logic
sub drive
		if state == STATE_SEARCHING then
			callsub checkBlack
		elseif state == STATE_FOLLOWING then					
			callsub useBlack
			callsub checkDeadline
		end
  
onevent timer0
	if state == STATE_GO then
		callsub stop
		callsub move_to_target
	end
	
# Victory sound from Beethoven's Fifth
# Play G three times for 1/3 seconds
#   and then Eb for 4/3 seconds
onevent sound.finished
  call leds.top(32,32,0)
  if  sound_state &lt; 2 then
    call sound.freq(392,20)
    sound_state++
  elseif  sound_state == 2 then
    call sound.freq(311,80)
    sound_state++
  elseif  sound_state == 3 then
    call leds.top(0,0,0)
  end
		
	
# Proximity event occurs, call subroutine drive
onevent prox
  if  state == STATE_SEARCHING or
  	  state == STATE_FOLLOWING then
	callsub drive
  end
</node>


</network>
